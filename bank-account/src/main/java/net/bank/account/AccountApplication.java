package net.bank.account;

import lombok.extern.java.Log;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.context.annotation.Bean;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.web.filter.ForwardedHeaderFilter;

import javax.validation.Validation;
import javax.validation.Validator;

@Slf4j
@SpringBootApplication
@EnableDiscoveryClient
@EnableMongoRepositories(basePackages = "net.bank.account")
public class AccountApplication {

	private static final String GIT_PROPERTIES_FILENAME = "git.properties";

	@Autowired
	private MongoTemplate mongoTemplate;

	public static void main(String[] args) {
		SpringApplication.run(AccountApplication.class, args);
	}


	/**
	 * Helper to read file generated by the maven-git-commit-id-plugin
	 * @return
	 */
	@Bean
	public static PropertySourcesPlaceholderConfigurer placeholderConfigurer() {
		PropertySourcesPlaceholderConfigurer propsConfig
				= new PropertySourcesPlaceholderConfigurer();
		propsConfig.setLocation(new ClassPathResource(GIT_PROPERTIES_FILENAME));
		propsConfig.setIgnoreResourceNotFound(true);
		propsConfig.setIgnoreUnresolvablePlaceholders(true);
		return propsConfig;
	}

	/**
	 * Used to perform bean-level validations.
	 * @return Bean validator
	 */
	@Bean
	public Validator validator() {
		return Validation.buildDefaultValidatorFactory().getValidator();
	}

	/**
	 * Handles X-Forwarded-* headers from Zuul Gateway. This is used by HATEOAS.
	 * @return ForwardedHeaderFilter
	 */
	@Bean
	ForwardedHeaderFilter forwardedHeaderFilter() {
		return new ForwardedHeaderFilter();
	}

}
